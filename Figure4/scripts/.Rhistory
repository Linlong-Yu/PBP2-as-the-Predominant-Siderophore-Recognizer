filtered_data_bacillibactin <- sider_info_plot[sider_info_plot$Most.similar.known.cluster=='bacillibactin',]
filtered_data_petrobactin <- sider_info_plot[sider_info_plot$Most.similar.known.cluster=='petrobactin',]
cluster_levels <- c("heterobactin","peucechelin", "scabichelin",
'EDHA','desferrioxamine','paenibactin','qinichelins',
"albomycin delta2", "bacillibactin","coelichelin",
"fuscachelin", "griseobactin",
"petrobactin","dehydroxynocardamine",
"staphyloferrin A", "staphyloferrin B"
)
sider_info_plot$Most.similar.known.cluster <- factor(
sider_info_plot$Most.similar.known.cluster,
levels = cluster_levels
)
p1 <- ggplot(sider_info_plot, aes(x =log10(nearest_receptor_distance + 10))) +  # +1 避免log(0)
geom_histogram(bins = 30, fill = "coral", color = "black", alpha = 0.7) +
facet_wrap(~ Most.similar.known.cluster, scales = "free_y") +
labs(
#title = "Distribution of Nearest Receptor Distance by Siderophore Cluster Type (Log Scale)",
x = "Distance to nearest PBP2 gene (log10bp)",
y = "Strain numebr"
) +
theme_minimal()
print(p1)
#ggsave("../Figure/receptor_distance_by_cluster.pdf", width = 12, height = 9)
#ggsave("../Figure/receptor_distance_by_cluster_plot.pdf", width = 12, height = 9)
table(sider_info_plot$Most.similar.known.cluster)
desfer <- sider_info_plot[sider_info_plot$Most.similar.known.cluster == 'desferrioxamine',]
desfer_1w <- desfer[desfer$nearest_receptor_distance > 6000,]
A = unique(desfer_1w$strainName)
C = unique(desfer$strainName)
desfer_1w_rawdata <- sider_info[sider_info$dataname %in% desfer_1w$dataname,]
#write.csv(desfer_1w_rawdata,'../output/des_distance_receptor.csv')
data_FpuA <- read.table('../input/blast_result/FpuA_results.txt',sep = "\t")
colnames(data_FpuA) <- c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen",
"qstart", "qend", "sstart", "send", "evalue", "bitscore")
data_FatB <- read.table('../input/blast_result/FatB_results.txt',sep = "\t")
colnames(data_FatB) <- c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen",
"qstart", "qend", "sstart", "send", "evalue", "bitscore")
data_DesE <- read.table('../input/blast_result/DesE_results.txt',sep = "\t")
colnames(data_DesE) <- c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen",
"qstart", "qend", "sstart", "send", "evalue", "bitscore")
data_CdtB <- read.table('../input/blast_result/CdtB_results.txt',sep = "\t")
colnames(data_CdtB) <- c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen",
"qstart", "qend", "sstart", "send", "evalue", "bitscore")
data_FeuA <- read.table('../input/blast_result/FeuA_results.txt',sep = "\t")
colnames(data_FeuA) <- c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen",
"qstart", "qend", "sstart", "send", "evalue", "bitscore")
data_HtbH <- read.table('../input/blast_result/HtbH_results.txt',sep = "\t")
colnames(data_HtbH) <- c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen",
"qstart", "qend", "sstart", "send", "evalue", "bitscore")
valid_FpuA <- data_FpuA[data_FpuA$pident > 40 & data_FpuA$length > 200,]
valid_FpuA<- valid_FpuA[!grepl("^C", valid_FpuA$sseqid), ]
valid_FpuA$strain_name <- sub('^([^_]+_[^_]+)_.+$','\\1',valid_FpuA$sseqid)
valid_FpuA <- valid_FpuA[!duplicated(valid_FpuA$strain_name),]
valid_FatB <- data_FatB[data_FatB$pident > 40 & data_FatB$length > 200,]
valid_FatB <- valid_FatB[!grepl("^C", valid_FatB$sseqid), ]
valid_FatB$strain_name <- sub("^([^_]+_[^_]+)_.+$", "\\1", valid_FatB$sseqid)
valid_FatB <- valid_FatB[!duplicated(valid_FatB$strain_name),]
valid_DesE <- data_DesE[data_DesE$pident > 40 & data_DesE$length > 200,]
valid_DesE <- valid_DesE[!grepl("^C", valid_DesE$sseqid), ]
valid_DesE$strain_name <- sub("^([^_]+_[^_]+)_.+$", "\\1", valid_DesE$sseqid)
valid_DesE <- valid_DesE[!duplicated(valid_DesE$strain_name),]
valid_CdtB <- data_CdtB[data_CdtB$pident > 40 & data_CdtB$length > 200,]
valid_CdtB <- valid_CdtB[!grepl("^C", valid_CdtB$sseqid), ]
valid_CdtB$strain_name <- sub("^([^_]+_[^_]+)_.+$", "\\1", valid_CdtB$sseqid)
valid_CdtB <- valid_CdtB[!duplicated(valid_CdtB$strain_name),]
valid_FeuA<- data_FeuA[data_FeuA$pident > 40 & data_FeuA$length > 200,]
valid_FeuA <- valid_FeuA[!grepl("^C", valid_FeuA$sseqid), ]
valid_FeuA$strain_name <- sub("^([^_]+_[^_]+)_.+$", "\\1", valid_FeuA$sseqid)
valid_FeuA <- valid_FeuA[!duplicated(valid_FeuA$strain_name),]
valid_HtbH<- data_HtbH[data_HtbH$pident > 40 & data_HtbH$length > 200,]
valid_HtbH <- valid_HtbH[!grepl("^C", valid_HtbH$sseqid), ]
valid_HtbH$strain_name <- sub("^([^_]+_[^_]+)_.+$", "\\1", valid_HtbH$sseqid)
valid_HtbH <- valid_HtbH[!duplicated(valid_HtbH$strain_name),]
sider_info <- read.csv('../input/sidero_info_accesion.csv')
sider_info$Most.similar.known.cluster[sider_info$Most.similar.known.cluster == 'desferrioxamin B/desferrioxamine E'| sider_info$Most.similar.known.cluster == 'desferrioxamin B'| sider_info$Most.similar.known.cluster == 'desferrioxamine E'| sider_info$Most.similar.known.cluster == 'legonoxamine A/desferrioxamine B/legonoxamine B' ] = 'desferrioxamine'
sider_info$Most.similar.known.cluster[sider_info$Most.similar.known.cluster == 'bacillibactin/bacillibactin E/bacillibactin F'] = 'bacillibactin'
sider_info$Most.similar.known.cluster[sider_info$Most.similar.known.cluster == 'heterobactin A/heterobactin S2'| sider_info$Most.similar.known.cluster == 'heterobactin B/heterobactin S2' ] = 'heterobactin'
desferrioxamine_info <- sider_info[sider_info$Most.similar.known.cluster == 'desferrioxamine',]
petrobactin_info <- sider_info[sider_info$Most.similar.known.cluster == 'petrobactin',]
petrobactin_info <- petrobactin_info[!duplicated(petrobactin_info$strainName),]
heterobactin_info <- sider_info[sider_info$Most.similar.known.cluster == 'heterobactin',]
#heterobactin_info <- heterobactin_info[!duplicated(heterobactin_info$strainName),]
bacillibactin_info <- sider_info[sider_info$Most.similar.known.cluster == 'bacillibactin',]
bacillibactin_info <- bacillibactin_info[!duplicated(bacillibactin_info$strainName),]
#bacillibactin_duplicated <- bacillibactin_info[duplicated(bacillibactin_info$strainName),]
rec_info <- read.csv('../input/rec_with_accession_version.csv')
rec_info_distance <- read.csv('../input/rec_in_5genera.csv')
rec_info_distance$VERSION <- rec_info$VERSION[match(rec_info_distance$Tag,rec_info$Tag)]
rec_info_distance$gbk_path <- rec_info$gbk_path[match(rec_info_distance$Tag,rec_info$Tag)]
rec_info$Border_Start <- rec_info_distance$Border_Start[match(rec_info$Tag, rec_info_distance$Tag)]
rec_info$Border_End <- rec_info_distance$Border_End[match(rec_info$Tag, rec_info_distance$Tag)]
rec_info$Strain_Name <- rec_info_distance$Strain_Name[match(rec_info$Tag, rec_info_distance$Tag)]
rec_info$locus_tag <- paste(rec_info$Strain_Name, rec_info$Tag, sep = "_")
HtbH_info <- rec_info[rec_info$locus_tag %in% valid_HtbH$sseqid,]
DesE_info <- rec_info[rec_info$locus_tag %in% valid_DesE$sseqid,]
CdtB_info <- rec_info[rec_info$locus_tag %in% valid_CdtB$sseqid,]
FeuA_info <- rec_info[rec_info$locus_tag %in% valid_FeuA$sseqid,]
FpuA_info <- rec_info[rec_info$locus_tag %in% valid_FpuA$sseqid,]
FatB_info <- rec_info[rec_info$locus_tag %in% valid_FatB$sseqid,]
calculate_strain_distances <- function(data1, data2) {
if (!"strainName" %in% colnames(data1)) {
stop("data1中缺少strainName列")
}
if (!"Strain_Name" %in% colnames(data2)) {
stop("data2中缺少Strain_Name列")
}
if (!"locus_tag" %in% colnames(data2)) {
stop("data2中缺少locus_tag列")
}
common_strains <- intersect(data1$strainName, data2$Strain_Name)
if (length(common_strains) == 0) {
warning("没有找到重合的strain名称")
return(data.frame(
sider_index = integer(0),
strain_name = character(0),
receptor_count = integer(0),
locus_tag = character(0),
absolute_distance = numeric(0),
relative_distance = numeric(0),
stringsAsFactors = FALSE
))
}
data1_filtered <- data1[data1$strainName %in% common_strains, ]
data2_filtered <- data2[data2$Strain_Name %in% common_strains, ]
results <- list()
result_index <- 1
for (i in 1:nrow(data1_filtered)) {
sider_info <- data1_filtered[i, ]
current_strain <- sider_info$strainName
matching_receptors <- data2_filtered[data2_filtered$Strain_Name == current_strain, ]
if (nrow(matching_receptors) == 0) {
results[[result_index]] <- data.frame(
sider_index = i,
strain_name = current_strain,
receptor_count = 0,
locus_tag = NA,
absolute_distance = NA,
relative_distance = NA,
stringsAsFactors = FALSE
)
result_index <- result_index + 1
next
}
bgc_start <- as.numeric(sider_info$start)
bgc_end <- as.numeric(sider_info$end)
bgc_length <- as.numeric(sider_info$length)
if (is.na(bgc_start) || is.na(bgc_end) || is.na(bgc_length) || bgc_length <= 0) {
for (j in 1:nrow(matching_receptors)) {
receptor <- matching_receptors[j, ]
results[[result_index]] <- data.frame(
sider_index = i,
strain_name = current_strain,
receptor_count = nrow(matching_receptors),
locus_tag = as.character(receptor$locus_tag),
absolute_distance = NA,
relative_distance = NA,
stringsAsFactors = FALSE
)
result_index <- result_index + 1
}
next
}
for (j in 1:nrow(matching_receptors)) {
receptor <- matching_receptors[j, ]
receptor_start <- as.numeric(receptor$Border_Start)
receptor_end <- as.numeric(receptor$Border_End)
if (is.na(receptor_start) || is.na(receptor_end)) {
results[[result_index]] <- data.frame(
sider_index = i,
strain_name = current_strain,
receptor_count = nrow(matching_receptors),
locus_tag = as.character(receptor$locus_tag),
absolute_distance = NA,
relative_distance = NA,
stringsAsFactors = FALSE
)
result_index <- result_index + 1
next
}
absolute_distance <- 0
if (receptor_start <= bgc_end && receptor_end >= bgc_start) {
absolute_distance <- 0
} else {
dist1 <- abs(receptor_start - bgc_start)
dist2 <- abs(receptor_start - bgc_end)
dist3 <- abs(receptor_end - bgc_start)
dist4 <- abs(receptor_end - bgc_end)
absolute_distance <- min(dist1, dist2, dist3, dist4)
}
relative_distance <- absolute_distance / bgc_length
results[[result_index]] <- data.frame(
sider_index = i,
strain_name = current_strain,
receptor_count = nrow(matching_receptors),
locus_tag = as.character(receptor$locus_tag),
absolute_distance = absolute_distance,
relative_distance = relative_distance,
stringsAsFactors = FALSE
)
result_index <- result_index + 1
}
}
if (length(results) > 0) {
final_result <- do.call(rbind, results)
rownames(final_result) <- NULL
return(final_result)
} else {
return(data.frame(
sider_index = integer(0),
strain_name = character(0),
receptor_count = integer(0),
locus_tag = character(0),
absolute_distance = numeric(0),
relative_distance = numeric(0),
stringsAsFactors = FALSE
))
}
}
heterobactin <- calculate_strain_distances(heterobactin_info,HtbH_info)
desferrioxamine_DesE <-  calculate_strain_distances(desferrioxamine_info,DesE_info)
desferrioxamine_CdtB<-  calculate_strain_distances(desferrioxamine_info,CdtB_info)
bacillibactin <- calculate_strain_distances(bacillibactin_info,FeuA_info)
petrobactin_FpuA <- calculate_strain_distances(petrobactin_info,FpuA_info)
petrobactin_FatB <- calculate_strain_distances(petrobactin_info,FatB_info)
library(dplyr)
library(ggplot2)
heterobactin$group <- "heterobactin"
desferrioxamine_DesE$group <- "desferrioxamine_DesE"
desferrioxamine_CdtB$group <- "desferrioxamine_CdtB"
bacillibactin$group <- "bacillibactin"
petrobactin_FpuA$group <- "petrobactin_FpuA"
petrobactin_FatB$group <- "petrobactin_FatB"
all_data <- bind_rows(
heterobactin,
desferrioxamine_DesE,
desferrioxamine_CdtB,
bacillibactin,
petrobactin_FpuA,
petrobactin_FatB
)
all_data$group <- factor(all_data$group,
levels = c(
"desferrioxamine_DesE", "desferrioxamine_CdtB",
"bacillibactin","heterobactin",
"petrobactin_FpuA", "petrobactin_FatB")
)
p <- ggplot(all_data, aes(x = log10(absolute_distance + 10))) +
geom_histogram(bins = 30, fill = "coral", color = "black", alpha = 0.7) +
facet_wrap(~ group, scales = "free_y", ncol = 2) +  # 两列布局
labs(
#x = "Distance to nearest PBP2 gene (log10bp)",
y = "Strain number"
) +
theme_minimal()
p
#ggsave("../Figure/self_receptor_distance_by_cluster.pdf", width = 4, height = 6.5)
write.csv(all_data,'../output/self_rec_distance_info.csv')
sider_info_with_nearest <- read.csv('../output/sider_info_with_nearest_rec.csv')
# 计算overlap ratio
datasets <- list(
heterobactin = heterobactin,
desferrioxamine_DesE = desferrioxamine_DesE,
desferrioxamine_CdtB = desferrioxamine_CdtB,
bacillibactin = bacillibactin,
petrobactin_FpuA = petrobactin_FpuA,
petrobactin_FatB = petrobactin_FatB
)
# 计算overlap ratios
overlap_results <- sapply(datasets, function(data) {
overlap_count <- length(intersect(data$locus_tag, sider_info_with_nearest$nearest_receptor_index))
total_count <- nrow(data)
ratio <- overlap_count / total_count
return(c(overlap_count = overlap_count, total_count = total_count, ratio = ratio))
})
library(reshape2)
overlap_df <- data.frame(t(overlap_results))
overlap_df$dataset <- rownames(overlap_df)
stacked_data <- overlap_df %>%
mutate(overlap = overlap_count,
non_overlap = total_count - overlap_count) %>%
select(dataset, overlap, non_overlap) %>%
melt(id.vars = "dataset", variable.name = "category", value.name = "count")
library(dplyr)
library(ggplot2)
stacked_data <- stacked_data %>%
mutate(category = factor(category, levels = c( "non_overlap","overlap")))
stacked_data_pct <- stacked_data %>%
group_by(dataset) %>%
mutate(count_pct = count / sum(count)) %>%
ungroup()
dataset_order <- c("petrobactin_FpuA", "petrobactin_FatB","bacillibactin","desferrioxamine_CdtB","desferrioxamine_DesE", "heterobactin")
stacked_data_pct <- stacked_data_pct %>%
mutate(dataset = factor(dataset, levels = dataset_order))
ggplot(stacked_data_pct, aes(x = dataset, y = count_pct, fill = category)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = c("overlap" = "steelblue", "non_overlap" = "lightgray")) +
coord_flip() +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
labs(title = "Overlap vs Non-overlap Proportion",
x = "Dataset", y = "Percentage") +
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
#ggsave("../Figure/overlap_self_nearest_receptor_distance_by_cluster.pdf", width = 7, height = 5)
data_FpuA <- read.table('../input/blast_result/FpuA_results.txt',sep = "\t")
colnames(data_FpuA) <- c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen",
"qstart", "qend", "sstart", "send", "evalue", "bitscore")
data_FatB <- read.table('../input/blast_result/FatB_results.txt',sep = "\t")
colnames(data_FatB) <- c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen",
"qstart", "qend", "sstart", "send", "evalue", "bitscore")
data_DesE <- read.table('../input/blast_result/DesE_results.txt',sep = "\t")
colnames(data_DesE) <- c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen",
"qstart", "qend", "sstart", "send", "evalue", "bitscore")
data_CdtB <- read.table('../input/blast_result/CdtB_results.txt',sep = "\t")
colnames(data_CdtB) <- c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen",
"qstart", "qend", "sstart", "send", "evalue", "bitscore")
valid_FpuA <- data_FpuA[data_FpuA$pident > 40 & data_FpuA$length > 200,]
valid_FpuA<- valid_FpuA[!grepl("^C", valid_FpuA$sseqid), ]
valid_FpuA$strain_name <- sub('^([^_]+_[^_]+)_.+$','\\1',valid_FpuA$sseqid)
valid_FpuA <- valid_FpuA[!duplicated(valid_FpuA$strain_name),]
valid_FatB <- data_FatB[data_FatB$pident > 40 & data_FatB$length > 200,]
valid_FatB <- valid_FatB[!grepl("^C", valid_FatB$sseqid), ]
valid_FatB$strain_name <- sub("^([^_]+_[^_]+)_.+$", "\\1", valid_FatB$sseqid)
valid_FatB <- valid_FatB[!duplicated(valid_FatB$strain_name),]
valid_DesE <- data_DesE[data_DesE$pident > 40 & data_DesE$length > 200,]
valid_DesE <- valid_DesE[!grepl("^C", valid_DesE$sseqid), ]
valid_DesE$strain_name <- sub("^([^_]+_[^_]+)_.+$", "\\1", valid_DesE$sseqid)
valid_DesE <- valid_DesE[!duplicated(valid_DesE$strain_name),]
valid_CdtB <- data_CdtB[data_CdtB$pident > 40 & data_CdtB$length > 200,]
valid_CdtB <- valid_CdtB[!grepl("^C", valid_CdtB$sseqid), ]
valid_CdtB$strain_name <- sub("^([^_]+_[^_]+)_.+$", "\\1", valid_CdtB$sseqid)
valid_CdtB <- valid_CdtB[!duplicated(valid_CdtB$strain_name),]
sider_info <- read.csv('../input/sider_info.csv')
petrobactin_info <- sider_info[sider_info$Most.similar.known.cluster == 'petrobactin',]
sider_info$Most.similar.known.cluster[sider_info$Most.similar.known.cluster == 'desferrioxamin B/desferrioxamine E'| sider_info$Most.similar.known.cluster == 'desferrioxamin B'| sider_info$Most.similar.known.cluster == 'desferrioxamine E'| sider_info$Most.similar.known.cluster == 'legonoxamine A/desferrioxamine B/legonoxamine B' ] = 'desferrioxamine'
desferrioxamine_info <- sider_info[sider_info$Most.similar.known.cluster == 'desferrioxamine',]
desferrioxamine_info <- desferrioxamine_info[!duplicated(desferrioxamine_info$strainName),]
petrobactin_strain_name <- petrobactin_info$strainName[!duplicated(petrobactin_info$strainName)]
petrobactin_strain_name <- petrobactin_info[petrobactin_info$strainName == 'GCF_030718825.1',]
petrobactin_info <- petrobactin_info[!duplicated(petrobactin_info$strainName),]
A=intersect(petrobactin_info$strainName,valid_FatB$strain_name)
B = intersect(petrobactin_info$strainName,valid_FpuA$strain_name)
C = setdiff(B,A)
venn_fit1 <-
list(
petrobactin = petrobactin_info$strainName,
FatB = valid_FatB$strain_name,
FpuA = valid_FpuA$strain_name
)
#install.packages("ggvenn")
library(ggvenn)
p <- ggvenn(
venn_fit1,
fill_color = c("#E41A1C", "#377EB8", "#4DAF4A"), # 好看的调色板
stroke_size = 0.5,
set_name_size = 5
)
p
#ggsave("../Figure/Petrobactin_venn_plot.pdf", plot = p, width = 6, height = 6)
venn_fit2 <-
list(
Desferrioxamine =desferrioxamine_info$strainName,
DesE = valid_DesE$strain_name,
CdtB = valid_CdtB$strain_name
)
p <- ggvenn(
venn_fit2,
fill_color = c("#E41A1C", "#377EB8", "#4DAF4A"), # 好看的调色板
stroke_size = 0.5,
set_name_size = 5
)
p
#ggsave("../Figure/Desferrioxamine_venn_plot.pdf", plot = p, width = 6, height = 6)
data <- read.csv('../output/self_rec_distance_info.csv')
bacillibactin <- data[data$group == 'bacillibactin',]
petrobactin_FpuA <- data[data$group == 'petrobactin_FpuA',]
petrobactin_FatB <- data[data$group == 'petrobactin_FatB',]
desferrioxamine_DesE <- data[data$group == 'desferrioxamine_DesE',]
desferrioxamine_CdtB <- data[data$group == 'desferrioxamine_CdtB',]
distant_bacillibactin <- bacillibactin[bacillibactin$absolute_distance > 0,]
distant_petrobactin_FpuA <- petrobactin_FpuA[petrobactin_FpuA$absolute_distance > 0,]
distant_petrobactin_FatB <- petrobactin_FatB[petrobactin_FatB$absolute_distance > 0,]
distant_desferrioxamine_DesE <- desferrioxamine_DesE[desferrioxamine_DesE$absolute_distance > 6000,]
distant_desferrioxamine_CdtB <- desferrioxamine_CdtB[desferrioxamine_CdtB$absolute_distance > 0,]
Fur_fimo_result <- read.csv('../input/fimo_result_Fur.csv')
Fur_fimo_result <- Fur_fimo_result[!duplicated(Fur_fimo_result$sequence_name),]
Fur_fimo_result$Locus_tag_complete <- paste0(
sub("\\.gbk$", "", Fur_fimo_result$strainname),
"_",
Fur_fimo_result$Locus_id
)
DmdR1_fimo_result <- read.csv('../input/fimo_result_DmdR1.csv')
hist(DmdR1_fimo_result$score)
DmdR1_fimo_result <- DmdR1_fimo_result[!duplicated(DmdR1_fimo_result$sequence_name),]
DmdR1_fimo_result$locus <- sub("^[^|]*\\|([^|]*)\\|.*$", "\\1", DmdR1_fimo_result$sequence_name)
#write.csv(DmdR1_fimo_result,'../output/DmdR1_fimo_result.csv')
DmdR1_fimo_result$strainname <- sub("\\.gbk.*$", "", DmdR1_fimo_result$sequence_name)
DmdR1_fimo_result$Locus_tag_complete <- paste0(DmdR1_fimo_result$strainname,"_",DmdR1_fimo_result$locus)
FeuA_Fur <- intersect(Fur_fimo_result$Locus_tag_complete,distant_bacillibactin$locus_tag)
FpuA_Fur <- intersect(Fur_fimo_result$Locus_tag_complete,distant_petrobactin_FpuA$locus_tag)
FatB_Fur <- intersect(Fur_fimo_result$Locus_tag_complete,distant_petrobactin_FatB$locus_tag)
strain_FpuA <- sub("^([^_]*_[^_]*)_.*$", "\\1", FpuA_Fur)
strain_FatB <- sub("^([^_]*_[^_]*)_.*$", "\\1", FatB_Fur)
intersect(strain_FatB,strain_FpuA)
Des_DmdR1 <- intersect(DmdR1_fimo_result$Locus_tag_complete,distant_desferrioxamine_DesE$locus_tag)
data_operon = read.csv('../input/operon_analysis_all_genome.csv')
data_operon$operon_Locus_tag_complete <- paste0(
sub("\\.gbk$", "", data_operon$filename),
"_",
data_operon$operon_first_locus
)
data_operon$Locus_tag_complete <- paste0(
sub("\\.gbk$", "", data_operon$filename),
"_",
data_operon$locus_tag
)
data_operon_clean <- data_operon[!is.na(data_operon$operon_first_ocus), ]
distant_desferrioxamine_CdtB$locus_operon <- data_operon$operon_Locus_tag_complete[match(distant_desferrioxamine_CdtB$locus_tag,data_operon$Locus_tag_complete)]
DesE_DmdR1 <- intersect(DmdR1_fimo_result$Locus_tag_complete,distant_desferrioxamine_DesE$locus_tag)
CdtB_DmdR1 <- intersect(DmdR1_fimo_result$Locus_tag_complete,distant_desferrioxamine_CdtB$locus_operon)
distant_desferrioxamine_CdtB_noDesE <- distant_desferrioxamine_CdtB[!desferrioxamine_CdtB$strain_name %in% desferrioxamine_DesE$strain_name,]
distant_desferrioxamine_CdtB_haveDesE <- distant_desferrioxamine_CdtB[desferrioxamine_CdtB$strain_name %in% desferrioxamine_DesE$strain_name,]
CdtB_DmdR1_noDesE <- intersect(DmdR1_fimo_result$Locus_tag_complete,distant_desferrioxamine_CdtB_noDesE$locus_operon)
CdtB_DmdR1_haveDesE <- intersect(DmdR1_fimo_result$Locus_tag_complete,distant_desferrioxamine_CdtB_haveDesE$locus_operon)
bacillus_BGC_fimo_results <- read.csv('../input/detect_all_BGC_all_genome_Fur.csv')
bacillus_BGC_fimo_results$dataname <- paste(bacillus_BGC_fimo_results$Subfolder,bacillus_BGC_fimo_results$File,sep = '_')
bacillus_BGC_fimo_results$dataname <- sub("\\.gbk$", "", bacillus_BGC_fimo_results$dataname)
bacillus_BGC_fimo_results_Fur <- bacillus_BGC_fimo_results[bacillus_BGC_fimo_results$Subset == 1,]
Str_BGC_fimo_results <- read.csv('../input/detect_all_BGC_all_genome_DmdR1.csv')
Str_BGC_fimo_results$dataname <- paste(Str_BGC_fimo_results$Subfolder,Str_BGC_fimo_results$File,sep = '_')
Str_BGC_fimo_results$dataname <- sub("\\.gbk$", "",Str_BGC_fimo_results$dataname)
Str_BGC_fimo_results_Fur <- Str_BGC_fimo_results[Str_BGC_fimo_results$Subset == 1,]
sider_info <- read.csv('../input/sidero_info_accesion.csv')
sider_info$Most.similar.known.cluster[sider_info$Most.similar.known.cluster == 'desferrioxamin B/desferrioxamine E'| sider_info$Most.similar.known.cluster == 'desferrioxamin B'| sider_info$Most.similar.known.cluster == 'desferrioxamine E'| sider_info$Most.similar.known.cluster == 'legonoxamine A/desferrioxamine B/legonoxamine B' ] = 'desferrioxamine'
sider_info$Most.similar.known.cluster[sider_info$Most.similar.known.cluster == 'bacillibactin/bacillibactin E/bacillibactin F'] = 'bacillibactin'
petrobactin_info <- sider_info[sider_info$Most.similar.known.cluster == 'petrobactin',]
#有一个错了，所以要去重，其他的检查过没问题
petrobactin_info <- petrobactin_info[!duplicated(petrobactin_info$strainName),]
bacillibactin_info <- sider_info[sider_info$Most.similar.known.cluster == 'bacillibactin',]
desferrioxamine_info <- sider_info[sider_info$Most.similar.known.cluster == 'desferrioxamine',]
library(dplyr)
distant_bacillibactin_syn <- bacillibactin_info[bacillibactin_info$strainName %in% distant_bacillibactin$strain_name,]
distant_petrobactin_FpuA_syn <- petrobactin_info[petrobactin_info$strainName %in% distant_petrobactin_FpuA$strain_name,]
distant_petrobactin_FatB_syn <- petrobactin_info[petrobactin_info$strainName %in% distant_petrobactin_FatB$strain_name,]
distant_desferrioxamine_DesE_syn <- desferrioxamine_info[desferrioxamine_info$strainName %in% distant_desferrioxamine_DesE$strain_name,]
distant_desferrioxamine_CdtB_noDesE_syn <- desferrioxamine_info[desferrioxamine_info$strainName %in% distant_desferrioxamine_CdtB_noDesE$strain_name,]
distant_desferrioxamine_CdtB_haveDesE_syn <- desferrioxamine_info[desferrioxamine_info$strainName %in% distant_desferrioxamine_CdtB_haveDesE$strain_name,]
bacillibactin_Fur <- intersect(distant_bacillibactin_syn$dataname,bacillus_BGC_fimo_results_Fur$dataname)
Petrobactin_FpuA_Fur <- intersect(distant_petrobactin_FpuA_syn$dataname,bacillus_BGC_fimo_results_Fur$dataname)
Petrobactin_FatB_Fur <- intersect(distant_petrobactin_FatB_syn$dataname,bacillus_BGC_fimo_results_Fur$dataname)
desferrioxamine_DesE_DmdR1 <- intersect(distant_desferrioxamine_DesE_syn$dataname,Str_BGC_fimo_results_Fur$dataname)
desferrioxamine_CdtB_noDesE_DmdR1 <- intersect(distant_desferrioxamine_CdtB_noDesE_syn$dataname,Str_BGC_fimo_results_Fur$dataname)
desferrioxamine_CdtB_haveDesE_DmdR1 <- intersect(distant_desferrioxamine_CdtB_haveDesE_syn$dataname,Str_BGC_fimo_results_Fur$dataname)
strain_CdtB <- sub("^([^_]*_[^_]*)_.*$", "\\1", CdtB_DmdR1)
near_Des_strain <- desferrioxamine_DesE$strain_name[desferrioxamine_DesE$absolute_distance < 6000]
no_near_Des<- desferrioxamine_info[!desferrioxamine_info$strainName %in% near_Des_strain, ]
no_near_DesE_have_CdtB <- no_near_Des[no_near_Des$strainName %in% desferrioxamine_CdtB$strain_name,]
strain_DmdR1_CdtB <- intersect(strain_CdtB,no_near_DesE_have_CdtB$strainName)
vec_list <- list(bacillibactin_Fur,FeuA_Fur,distant_bacillibactin$strain_name,
Petrobactin_FpuA_Fur,FpuA_Fur,distant_petrobactin_FpuA$strain_name,
Petrobactin_FatB_Fur,FatB_Fur,distant_petrobactin_FatB$strain_name,
desferrioxamine_DesE_DmdR1,DesE_DmdR1,distant_desferrioxamine_DesE$strain_name,
desferrioxamine_CdtB_haveDesE_DmdR1,CdtB_DmdR1_haveDesE,distant_desferrioxamine_CdtB_haveDesE$strain_name,
desferrioxamine_CdtB_noDesE_DmdR1,CdtB_DmdR1_noDesE,distant_desferrioxamine_CdtB_noDesE$strain_name)
lengths_list <- sapply(vec_list, length)
df <- data.frame(
lengths_list[seq(1,18,by=3)],
lengths_list[seq(2,18,by=3)],
lengths_list[seq(3,18,by=3)]
)
colnames(df) <- c('synthetase','self_receptor','Total strain number')
rownames(df) <- c('bacillibactin-FeuA','petrobactin-FpuA','petrobactin-FatB','desferrioxamine-DesE','desferrioxamine-CdtB(with DesE)','desferrioxamine-CdtB(without DesE)')
df$synthetase_ratio <- df$synthetase/df$`Total strain number`
df$szelf_receptor_ratio <- df$self_receptor/df$`Total strain number`
library(ggplot2)
library(gridExtra)
library(scales)
make_plot <- function(df, i) {
plot_data <- data.frame(
variable = c("synthetase_ratio", "szelf_receptor_ratio"),
value = c(df[i, "synthetase_ratio"], df[i, "szelf_receptor_ratio"])
)
ggplot(plot_data, aes(x = variable, y = value, fill = variable)) +
geom_bar(stat = "identity", width = 0.6) +
geom_text(aes(label = percent(value, accuracy = 1)),
vjust = -0.5, size = 3) +
scale_fill_manual(values = c("synthetase_ratio" = "#3498db",
"szelf_receptor_ratio" = "#e74c3c")) +
scale_y_continuous(labels = percent_format(accuracy = 1), limits = c(0, 1)) +
labs(title = rownames(df)[i], x = "", y = "") +
theme_minimal() +
theme(
panel.grid.major.y = element_line(color = "grey80", linetype = "dashed"),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.border = element_rect(color = "black", fill = NA, size = 1),
legend.position = "none",
plot.title = element_text(hjust = 0.5, size = 10),
axis.text = element_text(size = 8),
axis.line.x = element_line(color = "black"),
axis.ticks.x = element_line(color = "black"),
plot.margin = margin(5, 5, 5, 5)
)
}
plots <- lapply(1:6, function(i) make_plot(df, i))
grid.arrange(grobs = plots, ncol = 6)
plot
#ggsave("../Figure/TF_ratio.pdf",
#     arrangeGrob(grobs = plots, ncol = 6),
#    width = 12, height = 3)
gc()
