data = read.csv('../input/summ_genus.csv',row.names = 1)
library(ggplot2)
library(dplyr)
# create groups
data <- data %>%
mutate(Known_Category = case_when(
Similarity >= 0.8 ~ "High confidence (>80%)",
Similarity >= 0.5 ~ "Medium confidence (50%-80%)",
Similarity >= 0.3 ~ "Low confidence (30%-50%)",
TRUE ~ "Unknown(<30%)"
))
# calculate proportion in different genera
data_summary <- data %>%
group_by(Genus, Known_Category) %>%
summarise(Count = n(), .groups = 'drop') %>%
group_by(Genus) %>%
mutate(Proportion = Count / sum(Count))
data_summary$Known_Category <- factor(data_summary$Known_Category,
levels = c("High confidence (>80%)",
"Medium confidence (50%-80%)",
"Low confidence (30%-50%)",
"Unknown(<30%)"))
genus_labels <- c(
Bacillus = expression(italic("Bacillus")),
Corynebacterium = expression(italic("Corynebacterium")),
Rhodococcus = expression(italic("Rhodococcus")),
Staphylococcus = expression(italic("Staphylococcus")),
Streptomyces = expression(italic("Streptomyces"))
)
p <- ggplot(data_summary, aes(x = Genus, y = Proportion, fill = Known_Category)) +
geom_col(width = 0.7, position = "stack") +
scale_fill_manual(values = c(
"High confidence (>80%)" = "#007474",
"Medium confidence (50%-80%)" = "#26a6a6",
"Low confidence (30%-50%)" = "#80c2c2",
"Unknown(<30%)" = "#b3b3b3")) +
scale_x_discrete(labels = genus_labels) +
scale_y_continuous(expand = c(0, 0)) +
labs(x = "Genus",
y = "Number of siderophore BGCs",
fill = "Siderophore BGC similarity to MIBiG") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 11, face = "plain"),
panel.grid = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
panel.border = element_rect(color = "black", fill = NA, size = 0.8)
)
print(p)
library(phytools)
library(ggtree)
library(treeio)
library(ggplot2)
library(dplyr)
library(ggnewscale)
library(ggnewscale)
tree <- read.tree("../input/RAxML_result.GCF_data_refined.tre")
genus_info <- read.csv("../input/genus_info.csv")
sider_info <- read.csv('../input/summ_genus.csv')
#  get strainname
sider_info$strain_name <- sub("^(([^_]+_[^_]+)).*$", "\\1", sider_info$dataname)
genus_info$number_NIS <- 0
genus_info$number_NRPS <- 0
for (i in seq_len(nrow(genus_info))) {
strain <- genus_info$strain_name[i]
matched_rows <- sider_info[sider_info$strain_name == strain, ]
genus_info$number_NIS[i] <- sum(grepl("NI-siderophore", matched_rows$syn_type, ignore.case = TRUE), na.rm = TRUE)
genus_info$number_NRPS[i] <- sum(grepl("NRP-metallophore", matched_rows$syn_type, ignore.case = TRUE), na.rm = TRUE)
}
genus_info$total_sider_number <- genus_info$number_NIS+genus_info$number_NRPS
genus_info$genus <- factor(genus_info$Genus)
genus_colors <- c('Bacillus' = '#66cc8f',
'Corynebacterium' = '#4b545e',
'Rhodococcus' = '#f25641',
'Staphylococcus' = '#ffb300',
'Streptomyces' = '#66b3d9')
library(ggtree)
library(ggtreeExtra)
library(ggplot2)
library(treeio)
library(dplyr)
p_base <- ggtree(tree, layout = 'fan', open.angle = 15, branch.length = "none") %<+% genus_info
p_base
p_genus <- p_base +
geom_fruit(
geom = geom_tile,
mapping = aes(y = strain_name, fill = genus),
width = 5,
offset = 0.1,
color = NA
) +
scale_fill_manual(values = genus_colors, name = "Genus")
p_genus
# add number_NIS ring
p_NIS <- p_genus +
geom_fruit(
geom = geom_bar,
mapping = aes(y = strain_name, x = number_NIS),
stat = "identity",
orientation = "y",
width = 0.3,
offset = 0.07,
fill = "#b71e36"
)
p_NIS
# add number_NRPS ring
p_NRPS <- p_NIS +
geom_fruit(
geom = geom_bar,
mapping = aes(y = strain_name, x = number_NRPS),
stat = "identity",
orientation = "y",
width = 0.3,
offset = 0.02,
fill = "#084b4a"
)
p_NRPS
library(dplyr)
data = read.csv('../input/summ_genus.csv',row.names = 1)
data <- data %>%
mutate(
NIS = ifelse(grepl("NI-siderophore", syn_type), 1, 0),
NRPS = ifelse(grepl("NRP-metallophore", syn_type), 1, 0)
)
data_summary <- data %>%
group_by(Genus) %>%
summarise(
NIS_count = sum(NIS),
NRPS_count = sum(NRPS),
Total = n()
)
SM_info = read.csv("../input/genus_gbk_summary.csv")
SM_info$Genus[3] = 'Bacillus'
SM_info_ordered <- SM_info[match(data_summary$Genus, SM_info$Genus), ]
SecondMeta_sider_info <- cbind(data_summary, SM_info_ordered)
SecondMeta_sider_info$Total_secondmeta = SecondMeta_sider_info$Total_gbk_Files - SecondMeta_sider_info$Subfolder_Count
SecondMeta_sider_info$average_sm = SecondMeta_sider_info$Total_secondmeta/SecondMeta_sider_info$Subfolder_Count
library(ggplot2)
library(dplyr)
library(tidyr)
library(forcats)
SecondMeta_sider_info = SecondMeta_sider_info[,-5]
data_long <- SecondMeta_sider_info %>%
mutate(Other_BGC = Total_secondmeta - NIS_count - NRPS_count) %>%
select(Genus, NIS_count, NRPS_count, Other_BGC, Subfolder_Count) %>%
pivot_longer(cols = c(NIS_count, NRPS_count, Other_BGC),
names_to = "BGC_Type",
values_to = "Count") %>%
group_by(Genus) %>%
mutate(Total = sum(Count)) %>%
ungroup() %>%
mutate(Genus = fct_reorder(Genus, Total))
# add labels
data_long$BGC_Type <- factor(data_long$BGC_Type,
levels = c("Other_BGC", "NIS_count", "NRPS_count"),
labels = c("Other BGCs", "NIS-siderophore BGC", "NRPS-siderophore BGC"))
data_long$average_counts = data_long$Count/data_long$Subfolder_Count
# plot
p <- ggplot(data_long, aes(x = average_counts, y = Genus, fill = BGC_Type)) +
geom_col(width = 0.7) +
scale_fill_manual(values = c(
"Other BGCs" = "grey70",
"NIS-siderophore BGC" = "#d52a4b",
"NRPS-siderophore BGC" = "#248c9a"
)) +
scale_x_continuous(expand = c(0, 0)) +
theme_minimal() +
labs(
title = "BGC Distribution by Genus",
x = "Count",
y = "",
fill = "BGC Type"
) +
theme(
panel.grid = element_blank(),
axis.line = element_line(color = "black"),
axis.ticks = element_line(color = "black"),
panel.border = element_rect(color = "black", fill = NA, size = 0.8),
legend.position = "bottom"
)
p
ggplot(shannon_index, aes(x = Genus, y = 1, fill = H)) +
geom_tile(color = "white", size = 0.5) +
scale_fill_gradient(low = "#81c3d7", high = "#f25e7a") +
labs(x = "Index", y = "", fill = "Value") +
theme_minimal() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid = element_blank())
data <- read.csv('../input/syn_info_5_genera.csv')
library(dplyr)
library(ggplot2)
data <- data %>%
group_by(Genus) %>%
mutate(total_size = sum(group_size),
relative_abundance = group_size / total_size)
#calculate α-diversity
shannon_index <- data %>%
group_by(Genus) %>%
summarise(H = -sum(relative_abundance * log(relative_abundance), na.rm = TRUE))  # 计算香农指数
ggplot(shannon_index, aes(x = Genus, y = 1, fill = H)) +
geom_tile(color = "white", size = 0.5) +
scale_fill_gradient(low = "#81c3d7", high = "#f25e7a") +
labs(x = "Index", y = "", fill = "Value") +
theme_minimal() +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid = element_blank())
library(ggrepel)
# set seed
set.seed(123)
# create fixed position
pos <- position_jitter(width = 0.2, height = 0, seed = 123)
data$Genus <- factor(data$Genus, levels = c("Bacillus", "Corynebacterium", "Rhodococcus", "Staphylococcus", "Streptomyces"))
p <- ggplot(data, aes(x = Genus, y = relative_abundance, color = Genus)) +
geom_point(
aes(group = Genus),
position = pos,
alpha = 0.7,
size = 3
) +
geom_text_repel(
aes(label = label),
position = pos,
size = 3,
color = "black",
box.padding = 0.4,
point.padding = 0.2,
segment.color = "black",
segment.size = 0.3,
force = 10,
force_pull = 1,
min.segment.length = 0,
max.overlaps = Inf
) +
scale_color_manual(
values = c(
'Bacillus' = '#66cc8f',
'Corynebacterium' = '#4b545e',
'Rhodococcus' = '#f25641',
'Staphylococcus' = '#ffb300',
'Streptomyces' = '#66b3d9'
),
) +
theme_minimal() +
labs(x = "Genus", y = "Relative Abundance") +
theme(axis.text.x = element_text(size = 11))
print(p)
